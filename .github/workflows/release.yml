name: Build and Release

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest] # macos-latest 也能加

    steps:
      - uses: actions/checkout@v3

      # -----------------------
      # 前端构建
      # -----------------------
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install frontend deps
        working-directory: frontend
        run: yarn install --frozen-lockfile

      - name: Build frontend
        working-directory: frontend
        run: yarn build

      # -----------------------
      # 后端构建
      # -----------------------
      - name: Install uv
        run: pip install uv

      - name: Sync dependencies
        run: uv sync --all-extras --dev

      - name: Extract version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(grep -Po '(?<=^version = ")[^"]*' pyproject.toml)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build with Nuitka
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            uv run nuitka --standalone --onefile ^
              --include-data-dir=frontend/dist=frontend/dist ^
              --windows-icon-from-ico=assets/app.ico ^
              --windows-disable-console ^
              run.py
          else
            uv run nuitka --standalone --onefile \
              --include-data-dir=frontend/dist=frontend/dist \
              run.py
          fi

      - name: Rename artifact
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            mv run.exe run-${{ steps.get_version.outputs.version }}-windows.exe
          else
            mv run run-${{ steps.get_version.outputs.version }}-linux
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ runner.os }}
          path: run-*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./dist

      - name: Get version again
        id: get_version
        run: |
          VERSION=$(grep -Po '(?<=^version = ")[^"]*' pyproject.toml)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create or Update Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          files: ./dist/*/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
