name: Build & Release

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  # 👈 必须加这一行，允许 GITHUB_TOKEN 创建/更新 Release

# ---- 构建前端，只构建一次 ----
jobs:
  frontend:
    runs-on: ubuntu-latest
    outputs:
      frontend-path: frontend/dist
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Build frontend
        run: |
          cd frontend
          yarn install --frozen-lockfile
          yarn build

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

# ---- 后端 Windows 打包 ----
  backend-windows:
    needs: frontend
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v3

      - name: Download frontend
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

      - name: Setup Python & uv
        run: |
          pip install uv
          uv sync --all-extras --dev

      - name: Extract version
        id: get_version_win
        run: |
          $version = Select-String -Path pyproject.toml -Pattern 'version = "(.*)"' | ForEach-Object { $_.Matches[0].Groups[1].Value }
          echo "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8

      - name: Build Windows executable
        run: uv run nuitka --standalone --onefile --include-data-dir=frontend/dist=frontend/dist --windows-disable-console --assume-yes-for-downloads --output-filename=run run.py
        shell: pwsh

      - name: Rename artifact
        run: ren run.exe run-${{ steps.get_version_win.outputs.version }}-windows.exe

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-windows
          path: run-*

# ---- 后端 Linux 打包 ----
  backend-linux:
    needs: frontend
    runs-on: ubuntu-22.04
    # 这里将 ubuntu-latest 改成 ubuntu-20.04
    outputs:
      version: ${{ steps.get_version_linux.outputs.version }}   # ✅ 关键
    steps:
      - uses: actions/checkout@v3

      - name: Download frontend
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

      - name: Setup Python & uv
        run: |
          pip install uv
          uv sync --all-extras --dev

      - name: Extract version
        id: get_version_linux
        run: |
          VERSION=$(grep -Po '(?<=^version = ")[^"]*' pyproject.toml)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Install GTK + GObject deps
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            gir1.2-gtk-3.0 \
            gobject-introspection \
            libgirepository1.0-dev \
            pkg-config \
            libcairo2-dev

      - name: Build Linux executable
        run: |
          uv add "pywebview[gtk]"
          uv run nuitka --standalone --onefile --include-data-dir=frontend/dist=frontend/dist --output-filename=run run.py

      - name: Rename artifact
        run: |
          mv run run-${{ steps.get_version_linux.outputs.version }}-linux

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-linux
          path: run-*

# ---- Release ----
  release:
    needs: [ backend-windows, backend-linux ]
    runs-on: ubuntu-latest
    steps:
      - name: Download backend artifacts (Linux)
        uses: actions/download-artifact@v4
        with:
          name: backend-linux
          path: ./dist/linux

      - name: Download backend artifacts (Windows)
        uses: actions/download-artifact@v4
        with:
          name: backend-windows
          path: ./dist/windows

      - name: Create or Update Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.backend-linux.outputs.version }}
          name: v${{ needs.backend-linux.outputs.version }}
          files: |
            ./dist/linux/*
            ./dist/windows/*